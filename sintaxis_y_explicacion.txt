Atajos de teclado importantes:

alt+ click izquierdo: rotar sobre un objeto. // CONFIGURARLO COMO BLENDER3D Usando rueda del medio del mouse
F: apuntar un objeto // CONFiGURARLO COMO BLENDER USANDO "."


-------------------------------------------------------------

-------------------------------------------------------------
//BUSCAR OBJETOS EN LA ESCENA de forma comun
Buscar actores cuando el juego se ejecuta es algo fundamental, pero bastante lento asi que usar con precaucion,
para buscar objetos en la escena hay que importar una libreria

#include "Kismet/GameplayStatics.h"


Luego buscamos por clase o por clase con tag.
importante poner "UGameplayStatics::"

////para buscar de actores que estan en la escena con tag

TArray<AActor* > TodosLosAcotres;//declaro variable
UGameplayStatics::GetAllActorsOfClassWithTag(GetWorld(), AActor::StaticClass(), TEXT("objeto"), TodosLosAcotres);//uso variable como parametro


////para buscar un solo actor por clase
class ADatosGlobales* datosEncontrados; 
TSubclassOf<class ADatosGlobales> enEscena;//declaro variable
datosEncontrados = UGameplayStatics::GetActorOfClass(GetWorld(), enEscena);//uso variable como parametro


//para buscar uno solo de otra forma usando como parametro nombre de la clase con ADatosGlobalesACar::StaticClass
class ADatosGlobales* datosEncontrados = UGameplayStatics::GetActorOfClass(GetWorld(), ADatosGlobalesACar::StaticClass() ); 
-------------------------------------------------------------

-------------------------------------------------------------

VERIFICAR QUE EL ACTOR TENGA ESA ETIQUETA

AActor* OtherActor //hago referencia al actor de alguna manera

OtherActor->GetRootComponent()->ComponentHasTag( FName("carPlayer") )

OtherActor->ActorHasTag( FName("carPlayer") )


-------------------------------------------------------------

------------------------------------------------------------

INPUTS
Tiene que heredar de Pawn, y sino es el player prinncipal hay que activarlo.
Los inputs tendrian que poder activarse desde cualquier lado

tenemos que usar el include
#include "Components/InputComponent.h"
#include "Input.h"

//en begin play
EnableInput(GetWorld()->GetFirstPlayerController());
//the enable input used here means i dont have to enable auto receive input in the editor window
UInputComponent* myInputComp = this->InputComponent;  //InputComponent variable is from AActor.h
//check that it is valid before calling
//i.e. not null.  
if (myInputComp)
{
  SetupMyPlayerInputComponent(myInputComp);
}


La función que se usa en .h
virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;


// la función que se usa en .Cpp
void ACar::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
	Super::SetupPlayerInputComponent(PlayerInputComponent);
	
	PlayerInputComponent->BindAction("derecha", EInputEvent::IE_Pressed, this, &ACar::MoverIzquierda);
}

-------------------------------------------------------------

-------------------------------------------------------------
MENSAJE POR PANTALLA.

//Sino funciona incluir.
#include "Engine/GameEngine.h".

//se puede hacer un define abajo de las importaciones de las librerias// no funciona
#define Print(x) if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Yellow, TEXT(x) );}//no funciona

Asi se imprimiria concatenando numeros
Print("Puntaje de gameMode, %f ", ReglasJuego->superVelocidad);

//Sino imprimir directo
GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, FString::Printf(TEXT("TEXT")));

//mensaje en consola
uelog
UE_LOG(LogTemp, Display, TEXT("Your message"));

//diferentes tipos de datos compañados
int intVar = 5;
float floatVar = 3.7f;
FString fstringVar = "an fstring variable";
UE_LOG(LogTemp, Warning, TEXT("Text, %d %f %s"), intVar, floatVar, *fstringVar );
-------------------------------------------------------------

-------------------------------------------------------------
OBTENER EL GAME MODE

en .H declaro el puntero a la clase gamemode con su correspondiente nombre usando forward declaration
class AReglasJuego* ReglasJuego;//puntero al game mode principal0.


incluyo en .CPP
#include "Engine/World.h" //incluimos el mundo
#include "ReglasJuego" //incluimos la clase game mode personal

y en la función beginPlay
ReglasJuego = Cast<AReglasJuego>(GetWorld()->GetAuthGameMode());

-------------------------------------------------------------

-------------------------------------------------------------
BLUEPRINT COMPONENTE ROOT

en .h
UPROPERTY(VisibleAnywhere)
USceneComponent * root; //root de todo el blueprint

en el contructor de .CPP
root = CreateDefaultSubobject<USceneComponent>(TEXT("CarRoot"));//creo el componente

RootComponent = root;//agrego como root

-------------------------------------------------------------

-------------------------------------------------------------
LEVEL SEQUENSE para animaciones NO FUNCIONA TIENE BUG

Incluir en .Cpp
#include "LevelSequence.h"//no funciona
#include "LevelSequencePlayer.h"//no funciona

en .h
UPROPERTY(EditAnywhere) ULevelSequence* SequenceAsset;
UPROPERTY() ULevelSequencePlayer* SequencePlayer;

en .CPP
ALevelSequenceActor* OutActor = nullptr;
SequencePlayer = ULevelSequencePlayer::CreateLevelSequencePlayer(GetWorld(), SequenceAsset, FMovieSceneSequencePlaybackSettings(), OutActor);

-------------------------------------------------------------

-------------------------------------------------------------
ON COMPONENT BEGIN OVERLAP

En .h
//caja de colision
UPROPERTY(VisibleAnywhere) class UBoxComponent* box; //caja de colision

//funcion para detectar eventos
UFUNCTION()
void OnComponentOverlapBeginBoxTriggerScore(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)//recibe 2 parametros que son punteros osea objetos de escena, yo y el otros

en .CPP
en el contructor de la clase.
creo la caja
BoxTriggerScore = CreateDefaultSubobject<UBoxComponent>(TEXT("BoxTriggerScore"));
BoxTriggerScore->AttachTo(root);

IMPORTANTE EN EL BEGIN PLAY ACTIVAMOS LA DINAMICA
BoxTriggerScore->OnComponentBeginOverlap.AddDynamic(this,&AEnemy::OnComponentOverlapBeginBoxTriggerScore);//creo la dinamica

//creo la función que declare
void NombreCLase::OnOverlapBegin(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)//recibe 2 parametros que son punteros osea objetos de escena, yo y el otros
{
	//proceso eventos
}

-------------------------------------------------------------

------------------------------------------------------------

//LLAMAR A BLUEPRINT DESDE EDITOR

UPROPERTY(BlueprintReadOnly) variable
UPROPERTY(BlueprintReadWrite) variable
UPROPERTY(EditAnywhere) variable
UPROPERTY(VisibleAnywhere) variable


-------------------------------------------------------------

------------------------------------------------------------

CREAR UN TIMER

En .h
FTimerHandle timer;
UPROPERTY(EditAnywhere) float DelayTime;
UPROPERTY(EditAnywhere) bool bLoop;
void TimerFuncion();

En .cpp
#include "TimerManager.h"

GetWorldTimerManager().SetTimer(timer, this, &Class::TimerFuncion, DelayTime, bLoop);

void TimerFuncion()
{

}



-------------------------------------------------------------

------------------------------------------------------------